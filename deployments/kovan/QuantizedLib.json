{
  "address": "0xF694c389323C6EB4a221F3f0C9480a2F771Fcf2c",
  "abi": [
    {
      "inputs": [],
      "name": "QUANTA_ETH_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_FACTORY_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_ROUTER_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "ethQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quanta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ReserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ReserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getPathForETHToToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "pairFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeDivisor",
          "type": "uint256"
        }
      ],
      "name": "quantaFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "aFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "qfactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        }
      ],
      "name": "quantizedAddressOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "qaddress",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "toQuanta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quanta",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "uniswapPoolExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "poolExists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6aae50529c1f360504b31100ec67ee9b3cf0179defa5c0dab514385e84f0219",
  "receipt": {
    "to": null,
    "from": "0x80EBffD553601340B688f246FD20a57BAab17AaD",
    "contractAddress": "0xF694c389323C6EB4a221F3f0C9480a2F771Fcf2c",
    "transactionIndex": 5,
    "gasUsed": "738063",
    "logsBloom": "0x
    "blockHash": "0x3d5190d62e99aad7e6bd6fbefa9030f9b839db1bb3683d9eb2cfba2880e9625d",
    "transactionHash": "0xa6aae50529c1f360504b31100ec67ee9b3cf0179defa5c0dab514385e84f0219",
    "logs": [],
    "blockNumber": 24141441,
    "cumulativeGasUsed": "1186106",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "39ea6b62d3ccbb1d057e5219143250c2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"QUANTA_ETH_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_FACTORY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_ROUTER_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"ethQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quanta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ReserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ReserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPathForETHToToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDivisor\",\"type\":\"uint256\"}],\"name\":\"quantaFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"aFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"qfactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"}],\"name\":\"quantizedAddressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"qaddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"toQuanta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quanta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"uniswapPoolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"poolExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libs/QuantizedLib.sol\":\"QuantizedLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"src/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x98175d91c381498242cfe636144516e485eca0857e50b123c1d4cf9b03974fb7\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc9c0103a859f853382d7b52d4ec6627afeb165897ae53ca21427403285f13243\",\"license\":\"MIT\"},\"src/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x324a1ce9ce3465bae48bea6ff3d2a9a2e2e09d787c7c6b824c0f8920262d3e5d\",\"license\":\"MIT\"},\"src/libs/QuantizedLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\n\\nlibrary QuantizedLib {\\n    address public constant UNISWAP_FACTORY_ADDRESS = 0x1da48ae241B984C8BA795677616DCc13b93e4d60;\\n    address public constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    uint256 public constant QUANTA_ETH_MULTIPLIER = 1000000;\\n\\n    function getFeesAndBalances(\\n        address quantized,\\n        address sender,\\n        address token,\\n        uint256 feeDivisor,\\n        uint256 amount\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 tbal,\\n            uint256 qbal,\\n            uint256 zbal,\\n            uint256 tfee,\\n            uint256 qfee,\\n            uint256 ttotal\\n        )\\n    {\\n        tbal = IERC20(token).balanceOf(sender);\\n        qbal = IERC1155(quantized).balanceOf(sender, 0);\\n        zbal = IERC1155(quantized).balanceOf(sender, uint256(token));\\n        tfee = amount / feeDivisor;\\n        qfee = toQuanta(token, tfee);\\n        ttotal = amount + tfee;\\n    }\\n\\n    function uniswapPoolExists(address token) public view returns (bool poolExists) {\\n        poolExists =\\n            IUniswapV2Factory(UNISWAP_FACTORY_ADDRESS).getPair(\\n                token,\\n                IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS).WETH()\\n            ) !=\\n            address(0);\\n    }\\n\\n    function toQuanta(address token, uint256 amount) public view returns (uint256 quanta) {\\n        (quanta, , ) = ethQuote(token, amount);\\n        quanta = quanta * QUANTA_ETH_MULTIPLIER;\\n    }\\n\\n    function quantaFee(\\n        address token,\\n        uint256 amount,\\n        uint256 feeDivisor\\n    ) public view returns (uint256 aFee) {\\n        aFee = toQuanta(token, amount / feeDivisor);\\n    }\\n\\n    function convertEthToQuanta(\\n        address factory,\\n        address dest,\\n        uint256 quantaAmount,\\n        uint256 deadline\\n    ) public {\\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\\n        uniswapRouter.swapETHForExactTokens{value: msg.value}(\\n            quantaAmount,\\n            getPathForETHToToken(quantizedAddressOf(factory, address(0x0))),\\n            dest,\\n            deadline\\n        );\\n        // refund leftover ETH to user\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"refund failed\\\");\\n    }\\n\\n    // calculates the CREATE2 address for the quantized erc20 without making any external calls\\n    function quantizedAddressOf(address qfactory, address token0) public pure returns (address qaddress) {\\n        qaddress = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        qfactory,\\n                        keccak256(abi.encodePacked(token0)),\\n                        hex\\\"cd4902b65e1285dd3266dd5a6212b18ff94b962e082ca6cd0a3c4538738b4a96\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) public pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function ethQuote(address token, uint256 tokenAmount)\\n        public\\n        view\\n        returns (\\n            uint256 quanta,\\n            uint256 ReserveA,\\n            uint256 ReserveB\\n        )\\n    {\\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\\n        (ReserveA, ReserveB) = getReserves(UNISWAP_ROUTER_ADDRESS, token, uniswapRouter.WETH());\\n        (quanta) = quote(tokenAmount, ReserveA, ReserveB);\\n    }\\n\\n    function getPathForETHToToken(address token) public pure returns (address[] memory) {\\n        IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(UNISWAP_ROUTER_ADDRESS);\\n        address[] memory path = new address[](2);\\n        path[0] = token;\\n        path[1] = uniswapRouter.WETH();\\n        return path;\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"Price: Price\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"Price: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = (amountA * (reserveB)) / reserveA;\\n    }\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"Price: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Price: ZERO_ADDRESS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3c10488c15e2dc62c3c784561777e72d8a23b827ec01682396fda8d6b04cdb67\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610c63610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100a35760003560e01c80631874f0a9146100a85780635d80940a146100f25780636d91c0e21461013657806379b369431461018a5780637dddfe9f146101925780637fa40ba1146102085780639bf710d414610210578063b73b51c614610218578063c1ee0a6314610244578063da76a13d1461027e578063fe4ad277146102c9575b600080fd5b6100d4600480360360408110156100be57600080fd5b506001600160a01b0381351690602001356102f7565b60408051938452602084019290925282820152519081900360600190f35b6101246004803603606081101561010857600080fd5b506001600160a01b0381351690602081013590604001356103b1565b60408051918252519081900360200190f35b61016e6004803603606081101561014c57600080fd5b506001600160a01b0381358116916020810135821691604090910135166103ce565b604080516001600160a01b039092168252519081900360200190f35b61016e610489565b6101b8600480360360208110156101a857600080fd5b50356001600160a01b03166104a1565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101f45781810151838201526020016101dc565b505050509050019250505060405180910390f35b61012461059e565b61016e6105a5565b6101246004803603604081101561022e57600080fd5b506001600160a01b0381351690602001356105bd565b61026a6004803603602081101561025a57600080fd5b50356001600160a01b03166105d7565b604080519115158252519081900360200190f35b81801561028a57600080fd5b506102c7600480360360808110156102a157600080fd5b506001600160a01b0381358116916020810135909116906040810135906060013561070b565b005b61016e600480360360408110156102df57600080fd5b506001600160a01b038135811691602001351661092f565b600080600080737a250d5630b4cf539739df2c5dacb4c659f2488d9050610397737a250d5630b4cf539739df2c5dacb4c659f2488d87836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561036657600080fd5b505afa15801561037a573d6000803e3d6000fd5b505050506040513d602081101561039057600080fd5b50516109c5565b90935091506103a7858484610a8c565b9350509250925092565b60006103c6848385816103c057fe5b046105bd565b949350505050565b60008060006103dd8585610b46565b604080516001600160601b0319606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501206001600160f81b031960688401529a90941b9093166069840152607d8301989098527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b737a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040805160028082526060828101909352737a250d5630b4cf539739df2c5dacb4c659f2488d91839181602001602082028036833701905050905083816000815181106104ea57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050816001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561054357600080fd5b505afa158015610557573d6000803e3d6000fd5b505050506040513d602081101561056d57600080fd5b505181518290600190811061057e57fe5b6001600160a01b0390921660209283029190910190910152915050919050565b620f424081565b731da48ae241b984c8ba795677616dcc13b93e4d6081565b60006105c983836102f7565b5050620f4240029392505050565b6000806001600160a01b0316731da48ae241b984c8ba795677616dcc13b93e4d606001600160a01b031663e6a4390584737a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561065457600080fd5b505afa158015610668573d6000803e3d6000fd5b505050506040513d602081101561067e57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152516044808301926020929190829003018186803b1580156106ce57600080fd5b505afa1580156106e2573d6000803e3d6000fd5b505050506040513d60208110156106f857600080fd5b50516001600160a01b0316141592915050565b737a250d5630b4cf539739df2c5dacb4c659f2488d8063fb3bdb41348561073b6107368a600061092f565b6104a1565b88876040518663ffffffff1660e01b81526004018085815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156107a757818101518382015260200161078f565b50505050905001955050505050506000604051808303818588803b1580156107ce57600080fd5b505af11580156107e2573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052602081101561080c57600080fd5b8101908080516040519392919084600160201b82111561082b57600080fd5b90830190602082018581111561084057600080fd5b82518660208202830111600160201b8211171561085c57600080fd5b82525081516020918201928201910280838360005b83811015610889578181015183820152602001610871565b5050505091909101604081905260009550339450479350915084905081818185875af1925050503d80600081146108dc576040519150601f19603f3d011682016040523d82523d6000602084013e6108e1565b606091505b5050905080610927576040805162461bcd60e51b815260206004820152600d60248201526c1c99599d5b990819985a5b1959609a1b604482015290519081900360640190fd5b505050505050565b604080516001600160601b0319606093841b8116602080840191909152835180840360140181526034840185528051908201206001600160f81b031960548501529590941b16605582015260698101939093527fcd4902b65e1285dd3266dd5a6212b18ff94b962e082ca6cd0a3c4538738b4a966089808501919091528151808503909101815260a99093019052815191012090565b60008060006109d48585610b46565b5090506000806109e58888886103ce565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610a1d57600080fd5b505afa158015610a31573d6000803e3d6000fd5b505050506040513d6060811015610a4757600080fd5b5080516020909101516001600160701b0391821693501690506001600160a01b0387811690841614610a7a578082610a7d565b81815b90999098509650505050505050565b6000808411610ad1576040805162461bcd60e51b815260206004820152600c60248201526b50726963653a20507269636560a01b604482015290519081900360640190fd5b600083118015610ae15750600082115b610b32576040805162461bcd60e51b815260206004820152601d60248201527f50726963653a20494e53554646494349454e545f4c4951554944495459000000604482015290519081900360640190fd5b8282850281610b3d57fe5b04949350505050565b600080826001600160a01b0316846001600160a01b03161415610bad576040805162461bcd60e51b815260206004820152601a60248201527950726963653a204944454e544943414c5f41444452455353455360301b604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b031610610bcd578284610bd0565b83835b90925090506001600160a01b038216610c26576040805162461bcd60e51b815260206004820152601360248201527250726963653a205a45524f5f4144445245535360681b604482015290519081900360640190fd5b925092905056fea264697066735822122020e4008c4c327f0d479f4c914d9b4a10eb6a8ba0d02440aa4ddf2459e038af2b64736f6c63430007030033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100a35760003560e01c80631874f0a9146100a85780635d80940a146100f25780636d91c0e21461013657806379b369431461018a5780637dddfe9f146101925780637fa40ba1146102085780639bf710d414610210578063b73b51c614610218578063c1ee0a6314610244578063da76a13d1461027e578063fe4ad277146102c9575b600080fd5b6100d4600480360360408110156100be57600080fd5b506001600160a01b0381351690602001356102f7565b60408051938452602084019290925282820152519081900360600190f35b6101246004803603606081101561010857600080fd5b506001600160a01b0381351690602081013590604001356103b1565b60408051918252519081900360200190f35b61016e6004803603606081101561014c57600080fd5b506001600160a01b0381358116916020810135821691604090910135166103ce565b604080516001600160a01b039092168252519081900360200190f35b61016e610489565b6101b8600480360360208110156101a857600080fd5b50356001600160a01b03166104a1565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101f45781810151838201526020016101dc565b505050509050019250505060405180910390f35b61012461059e565b61016e6105a5565b6101246004803603604081101561022e57600080fd5b506001600160a01b0381351690602001356105bd565b61026a6004803603602081101561025a57600080fd5b50356001600160a01b03166105d7565b604080519115158252519081900360200190f35b81801561028a57600080fd5b506102c7600480360360808110156102a157600080fd5b506001600160a01b0381358116916020810135909116906040810135906060013561070b565b005b61016e600480360360408110156102df57600080fd5b506001600160a01b038135811691602001351661092f565b600080600080737a250d5630b4cf539739df2c5dacb4c659f2488d9050610397737a250d5630b4cf539739df2c5dacb4c659f2488d87836001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561036657600080fd5b505afa15801561037a573d6000803e3d6000fd5b505050506040513d602081101561039057600080fd5b50516109c5565b90935091506103a7858484610a8c565b9350509250925092565b60006103c6848385816103c057fe5b046105bd565b949350505050565b60008060006103dd8585610b46565b604080516001600160601b0319606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501206001600160f81b031960688401529a90941b9093166069840152607d8301989098527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b737a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040805160028082526060828101909352737a250d5630b4cf539739df2c5dacb4c659f2488d91839181602001602082028036833701905050905083816000815181106104ea57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050816001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561054357600080fd5b505afa158015610557573d6000803e3d6000fd5b505050506040513d602081101561056d57600080fd5b505181518290600190811061057e57fe5b6001600160a01b0390921660209283029190910190910152915050919050565b620f424081565b731da48ae241b984c8ba795677616dcc13b93e4d6081565b60006105c983836102f7565b5050620f4240029392505050565b6000806001600160a01b0316731da48ae241b984c8ba795677616dcc13b93e4d606001600160a01b031663e6a4390584737a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561065457600080fd5b505afa158015610668573d6000803e3d6000fd5b505050506040513d602081101561067e57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152516044808301926020929190829003018186803b1580156106ce57600080fd5b505afa1580156106e2573d6000803e3d6000fd5b505050506040513d60208110156106f857600080fd5b50516001600160a01b0316141592915050565b737a250d5630b4cf539739df2c5dacb4c659f2488d8063fb3bdb41348561073b6107368a600061092f565b6104a1565b88876040518663ffffffff1660e01b81526004018085815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156107a757818101518382015260200161078f565b50505050905001955050505050506000604051808303818588803b1580156107ce57600080fd5b505af11580156107e2573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052602081101561080c57600080fd5b8101908080516040519392919084600160201b82111561082b57600080fd5b90830190602082018581111561084057600080fd5b82518660208202830111600160201b8211171561085c57600080fd5b82525081516020918201928201910280838360005b83811015610889578181015183820152602001610871565b5050505091909101604081905260009550339450479350915084905081818185875af1925050503d80600081146108dc576040519150601f19603f3d011682016040523d82523d6000602084013e6108e1565b606091505b5050905080610927576040805162461bcd60e51b815260206004820152600d60248201526c1c99599d5b990819985a5b1959609a1b604482015290519081900360640190fd5b505050505050565b604080516001600160601b0319606093841b8116602080840191909152835180840360140181526034840185528051908201206001600160f81b031960548501529590941b16605582015260698101939093527fcd4902b65e1285dd3266dd5a6212b18ff94b962e082ca6cd0a3c4538738b4a966089808501919091528151808503909101815260a99093019052815191012090565b60008060006109d48585610b46565b5090506000806109e58888886103ce565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610a1d57600080fd5b505afa158015610a31573d6000803e3d6000fd5b505050506040513d6060811015610a4757600080fd5b5080516020909101516001600160701b0391821693501690506001600160a01b0387811690841614610a7a578082610a7d565b81815b90999098509650505050505050565b6000808411610ad1576040805162461bcd60e51b815260206004820152600c60248201526b50726963653a20507269636560a01b604482015290519081900360640190fd5b600083118015610ae15750600082115b610b32576040805162461bcd60e51b815260206004820152601d60248201527f50726963653a20494e53554646494349454e545f4c4951554944495459000000604482015290519081900360640190fd5b8282850281610b3d57fe5b04949350505050565b600080826001600160a01b0316846001600160a01b03161415610bad576040805162461bcd60e51b815260206004820152601a60248201527950726963653a204944454e544943414c5f41444452455353455360301b604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b031610610bcd578284610bd0565b83835b90925090506001600160a01b038216610c26576040805162461bcd60e51b815260206004820152601360248201527250726963653a205a45524f5f4144445245535360681b604482015290519081900360640190fd5b925092905056fea264697066735822122020e4008c4c327f0d479f4c914d9b4a10eb6a8ba0d02440aa4ddf2459e038af2b64736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}