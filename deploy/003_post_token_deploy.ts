import {HardhatRuntimeEnvironment} from 'hardhat/types';
import {DeployFunction} from 'hardhat-deploy/types';

import {Quantized} from '../quantized-ui/types/Quantized';
import {QuantizedMultitoken} from '../quantized-ui/types/QuantizedMultitoken';
import {QuantizedERC20Factory} from '../quantized-ui/types/QuantizedERC20Factory';
import {FeeTracker} from '../quantized-ui/types/QuantizedERC20Factory';

import {keccak256} from '@ethersproject/solidity';

const func: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {
  const [sender] = await hre.ethers.getSigners();

  const {deployments} = hre;
  const getContractAt = hre.ethers.getContractAt;
  const {get} = deployments;

  const quantized: Quantized = ((await getContractAt(
    'Quantized',
    (await get('Quantized')).address,
    sender
  )) as unknown) as Quantized;

  const multitoken: QuantizedMultitoken = ((await getContractAt(
    'QuantizedMultitoken',
    (await get('QuantizedMultitoken')).address,
    sender
  )) as unknown) as QuantizedMultitoken;

  const factory: QuantizedERC20Factory = ((await getContractAt(
    'QuantizedERC20Factory',
    (await get('QuantizedERC20Factory')).address,
    sender
  )) as unknown) as QuantizedERC20Factory;

  const feeTracker: FeeTracker = ((await getContractAt(
    'FeeTracker',
    (await get('FeeTracker')).address,
    sender
  )) as unknown) as FeeTracker;

  await multitoken.tranferOwnership(quantized.address);
  await feeTracker.tranferOwnership(quantized.address);

  await quantized.initialize(
    multitoken.address,
    factory.address,
    feeTracker.address
  );

  // const bc =
  //   '608060405234801561001057600080fd5b50600180546001600160a01b031916331790556109a5806100326000396000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c806306fdde031461009e578063095ea7b31461011b57806318160ddd1461015b57806323b872dd14610175578063313ce567146101ab578063485cc955146101c957806370a08231146101f957806375991d421461021f57806395d89b4114610227578063a9059cbb1461022f578063dd62ed3e1461025b575b600080fd5b6100a6610289565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100e05781810151838201526020016100c8565b50505050905090810190601f16801561010d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101476004803603604081101561013157600080fd5b506001600160a01b0381351690602001356103be565b604080519115158252519081900360200190f35b610163610443565b60408051918252519081900360200190f35b6101476004803603606081101561018b57600080fd5b506001600160a01b038135811691602081013590911690604001356104b9565b6101b3610547565b6040805160ff9092168252519081900360200190f35b6101f7600480360360408110156101df57600080fd5b506001600160a01b038135811691602001351661058c565b005b6101636004803603602081101561020f57600080fd5b50356001600160a01b0316610610565b61016361069c565b6100a66106f0565b6101476004803603604081101561024557600080fd5b506001600160a01b038135169060200135610735565b6101636004803603604081101561027157600080fd5b506001600160a01b038135811691602001351661074b565b600354604080516306fdde0360e01b815290516060926001600160a01b0316916306fdde03916004808301926000929190829003018186803b1580156102ce57600080fd5b505afa1580156102e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561030b57600080fd5b8101908080516040519392919084600160201b82111561032a57600080fd5b90830190602082018581111561033f57600080fd5b8251600160201b81118282018810171561035857600080fd5b82525081516020918201929091019080838360005b8381101561038557818101518382015260200161036d565b50505050905090810190601f1680156103b25780820380516001836020036101000a031916815260200191505b50604052505050905090565b60006103cb338484610765565b6002546040805163a22cb46560e01b81526001600160a01b038681166004830152600160248301529151919092169163a22cb46591604480830192600092919082900301818387803b15801561042057600080fd5b505af1158015610434573d6000803e3d6000fd5b50505050600190505b92915050565b600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561048857600080fd5b505afa15801561049c573d6000803e3d6000fd5b505050506040513d60208110156104b257600080fd5b5051919050565b6001600160a01b03831660009081526020818152604080832033845290915281205460001914610532576001600160a01b03841660009081526020818152604080832033845290915290205461050f90836107c5565b6001600160a01b0385166000908152602081815260408083203384529091529020555b61053d848484610815565b5060019392505050565b6003546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561048857600080fd5b6001546001600160a01b031633146105e2576040805162461bcd60e51b815260206004820152601460248201527328bab0b73a34bd32b21d102327a92124a22222a760611b604482015290519081900360640190fd5b600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055565b60025460035460408051627eeac760e11b81526001600160a01b03858116600483015292831660248201529051600093929092169162fdd58e91604480820192602092909190829003018186803b15801561066a57600080fd5b505afa15801561067e573d6000803e3d6000fd5b505050506040513d602081101561069457600080fd5b505192915050565b600254600354604080516339370aa960e21b81526001600160a01b0392831660048201529051600093929092169163e4dc2aa491602480820192602092909190829003018186803b15801561048857600080fd5b600354604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b1580156102ce57600080fd5b6000610742338484610815565b50600192915050565b600060208181529281526040808220909352908152205481565b6001600160a01b0380841660008181526020818152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b8082038281111561043d576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b6001600160a01b0383166000908152602081815260408083203384529091529020546000191461088e576001600160a01b03831660009081526020818152604080832033845290915290205461086b90826107c5565b6001600160a01b0384166000908152602081815260408083203384529091529020555b6002546003805460408051637921219560e11b81526001600160a01b038881166004830152878116602483015292831660448201526064810186905260a0608482015260a48101939093526203078360ec1b60c48401525192169163f242432a9160e48082019260009290919082900301818387803b15801561091057600080fd5b505af1158015610924573d6000803e3d6000fd5b50506040805184815290516001600160a01b038087169450871692507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350505056fea26469706673582212201bfe1136cd92d630e6e908dd88ebfa8687af69da007612e50d19288d93091bd264736f6c63430007030033';
  // const COMPUTED_INIT_CODE_HASH = keccak256(['bytes'], [`0x${bc}`]);

  // console.log('Quantized address:' + quantized.address);
  // console.log('QuantizedERC20 init code hash:' + COMPUTED_INIT_CODE_HASH);
};
func.tags = ['QuantizedPost'];
func.dependencies = ['QuantizedLibs', 'QuantizedContracts'];
export default func;
